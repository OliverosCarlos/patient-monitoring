//File generated by vaweei CLI
import { Component, OnInit, Output, EventEmitter, ViewChild, ElementRef, HostListener, OnDestroy, Input, AfterViewInit } from '@angular/core';
import { FormGroup, FormControl, Validators, FormBuilder } from '@angular/forms';
import { ActivatedRoute, Router } from '@angular/router';
import { CLINICAL_HISTORY } from 'src/app/utils/setup/routes.enum';

//SERVICES
import { BackendService } from 'src/app/services/backend.service';
import { HeaderService } from 'src/app/services/header.service';
import { UtilService } from 'src/app/services/util.service';

import { Subscription } from 'rxjs';
import { filter } from 'rxjs/operators';

@Component({
  selector: 'app-clinical_note-show-form-view',
  templateUrl: './clinical_note-show-form-view.component.html',
  styleUrls: ['./clinical_note-show-form-view.component.scss']
})
export class ClinicalNoteShowFormViewComponent implements OnInit, OnDestroy, AfterViewInit {

  @Input() note: any;

  record = {
    id: 0,
    session_approach: '',
    clinical_progress: '',
    session_objective: '',
    state_of_mind: '',
    conducts_and_non_verbal_languages: '',
    observations: ''
  };

  isModal = false

  $headerAction!: Subscription;

  constructor(
    private backendService: BackendService,
    private headerService: HeaderService,
    private utilService: UtilService,
    private route: ActivatedRoute,
    private router : Router
  ) {}

  ngOnDestroy(): void {
    if(!this.isModal){
      this.$headerAction.unsubscribe();
    }
  }

  ngAfterViewInit(): void {
    if(!this.isModal){
      this.$headerAction = this.headerService.getOutAction().subscribe(data => {
        switch (data.action) {
          case 'edit':
            this.edit();
            break;
        
          default:
            break;
        }
      });
  
      this.utilService.set({name:'tracking', type:'show'});
    }

  }

  ngOnInit() {
    if(this.route.snapshot.paramMap.get('tracking_id')){
      this.trackingById(this.route.snapshot.paramMap.get('tracking_id'));
      this.headerService.setHeader({name:'tracking',type:'show'});
    }else{
      this.isModal = true
    }
  }

  trackingById(id:any){
    if(id){
     this.backendService.getOneById(CLINICAL_HISTORY.CLINICAL_NOTE_BY_PATIENT,id).subscribe({
       next: (v) => { this.note = v; console.log(v);
       },
       error: (e) => console.error(e),
       complete: () => console.info('complete')
     });
    }
  }

  edit(){
    this.router.navigate(['catalogs','hobbies-interest','update',this.route.snapshot.paramMap.get('hobbies-interest_id')]);
  }

}
    