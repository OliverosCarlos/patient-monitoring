//File generated by vaweei CLI
import { Component, OnInit, Output, EventEmitter, ViewChild, ElementRef, HostListener, OnDestroy, Input, AfterViewInit } from '@angular/core';
import { FormGroup, FormControl, Validators, FormBuilder } from '@angular/forms';
import { ActivatedRoute, Router } from '@angular/router';
import { GENERAL } from 'src/app/utils/setup/routes.enum';

//SERVICES
import { BackendService } from 'src/app/services/backend.service';
import { HeaderService } from 'src/app/services/header.service';
import { UtilService } from 'src/app/services/util.service';
import {MatAccordion} from '@angular/material/expansion';
import { Subscription } from 'rxjs';
import { filter } from 'rxjs/operators';

//MODELS
import { MODELS } from 'src/app/utils/setup/model.setup';
import { Model } from 'src/app/models/vw-model.model';

@Component({
  selector: 'app-clinical_history-show-view',
  templateUrl: './clinical_history-show-view.component.html',
  styleUrls: ['./clinical_history-show-view.component.scss']
})
export class ClinicalHistoryShowViewComponent implements OnInit, OnDestroy, AfterViewInit {

  model : Model;


  record:any = {
    patient:{},
    reason_consultation: {},
    nonverbal_language: {},
    hobbies_interest_list: {},
    personal_characteristics: {},
    therapy_objectives: {},
    approach: {}
  }
  //   first_name: '',
  //   last_name1: '',
  //   last_name2: '',
  //   age: '',
  //   phone_number: '',
  //   email: '',
  //   image: '',
  //   clinical_notes:[
  //     {
  //       reason_consultations:[{notes:'',reason_consultation_symptoms:[{symptom_name:'', symptom_color:null}]}],
  //       clinical_note_functionality_analysis: [{notes:'', functionality_analysis:[{emotion_name:'', conduct:'', functionality:'', emotion_color:''}]}],
  //       clinical_note_hobbies_interest: [{notes:'',hobbies_interest_list:[{hobbies_interests_name:''}]}],
  //       personal_characteristics: [{notes:''}],
  //       therapy_objectives: [{notes:''}],
  //       approachs: [{notes:''}],
  //       nonverbal_languages: [{notes:'', person:false, space:false, time:false}] 
  //     }
  //   ]
  // };

  area1 : any[] = []
  area2 : any[] = []
  area3 : any[] = []
  area4 : any[] = []

  displayedColumns = ['emotion','conduct','functionality','color'];

  $headerAction!: Subscription;

  @ViewChild(MatAccordion) accordion!: MatAccordion;

  private _clinical_history_data: any[] = [];   
  @Input()
  set clinical_history_data(value: any) { 
    this._clinical_history_data = value;
    if(value){
      this.buildData(value)
    }
  }  
  get clinical_history_data(): any { return this._clinical_history_data}

  constructor(
    private backendService: BackendService,
    private headerService: HeaderService,
    private utilService: UtilService,
    private route: ActivatedRoute,
    private router : Router
  ) {
    this.model = MODELS.find(model => model.name == 'clinical-history')!;
    if(this.route.snapshot.paramMap.get('id')){
      this.clinical_noteById(this.route.snapshot.paramMap.get('id'));
    }
  }

  ngOnDestroy(): void {
    this.$headerAction.unsubscribe();
  }

  ngAfterViewInit(): void {
    this.$headerAction = this.headerService.getOutAction().subscribe(data => {
      switch (data.action) {
        case 'edit':
          this.edit();
          break;
      
        default:
          break;
      }
    });
  }

  ngOnInit() {
    this.headerService.setHeader({model: this.model, type:'show'});
    this.utilService.set({name:'clinical-history', type:'show'});
    if(this.clinical_history_data){
      console.log(this.clinical_history_data);
      this.buildData(this.clinical_history_data);
    }
  }

  buildData(data: any){
    this.record = data; this.setAreas(data);
  }

  clinical_noteById(id:any){
    if(id){
     this.backendService.getOneById(GENERAL.CLINICAL_HISTORY_PSYCHOTHERAPY,id).subscribe({
       next: (v) => { this.buildData(v)},
       error: (e) => console.error(e),
       complete: () => console.info('complete')
     });
    }
  }

  setAreas(data:any){
    console.log("SUPPORT NETWORK", data);
    
    data.support_network.support_network_list.forEach((item: any) => {
      console.log(item);
      
      switch (item.area) {
        case "1":
          this.area1.push(item)
          break;
        case "2":
          this.area2.push(item)
          break;
        case "3":
          this.area3.push(item)
          break;
        case "4":
          this.area4.push(item)
          break;
        default:
          break;
      }
    });
  }

  edit(){
    this.router.navigate(['catalogs','hobbies-interest','update',this.route.snapshot.paramMap.get('hobbies-interest_id')]);
  }

  viewEmotion(data:any){
    console.log(data)
  }
}
    