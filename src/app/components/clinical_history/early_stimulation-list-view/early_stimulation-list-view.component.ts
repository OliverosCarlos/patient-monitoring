//File generated by vaweei CLI
import { AfterViewInit, Component, OnDestroy, OnInit } from '@angular/core';
import { ActivatedRoute, Router } from '@angular/router';
import { Subscription } from 'rxjs';
import { CLINICAL_HISTORY, CATALOGS } from 'src/app/utils/setup/routes.enum';

//SERVICE
import { HeaderService } from 'src/app/services/header.service';
import { BackendService } from 'src/app/services/backend.service';
import { UtilService } from 'src/app/services/util.service';

//MODELS
import { Hobbies_Interest } from 'src/app/models/hobbies_interest.model';
import {SelectionModel} from '@angular/cdk/collections';
import {MatTableDataSource} from '@angular/material/table';
import { MODELS } from 'src/app/utils/setup/model.setup';
import { Model } from 'src/app/models/vw-model.model';

@Component({
  selector: 'app-early_stimulation-list-view',
  templateUrl: './early_stimulation-list-view.component.html',
  styleUrls: ['./early_stimulation-list-view.component.scss']
})
export class EarlyStimulationListViewComponent implements OnInit, AfterViewInit, OnDestroy {

  model : Model;
  
  displayedColumns = ['select' , 'patient', 'medical_diagnosis', 'reason_consultation', 'report'];
  dataSource = new MatTableDataSource<Hobbies_Interest>([]);
  selection = new SelectionModel<Hobbies_Interest>(true, []);

  $headerAction!: Subscription;
  $advanceSearch!: Subscription;

  constructor(
    private router : Router,
    private headerService : HeaderService,
    private backendService : BackendService,
    private utilService: UtilService
    ) {
      this.model = MODELS.find(model => model.name == 'early-stimulation')!;
    }

  ngOnDestroy(): void {
    this.$headerAction!.unsubscribe();
    this.$advanceSearch!.unsubscribe();
  }

  ngAfterViewInit(): void {
    this.headerService.setSetupSearch({name:'early-stimulation'})
    this.$headerAction! = this.headerService.getOutAction().subscribe(data => {
      switch (data.action) {
        case 'delete':
          this.delete();
          break;
      
        default:
          break;
      }
    });
    this.$advanceSearch! = this.headerService.getDataSearch().subscribe(data => {
      this.getAll(data)
    });
  }

  ngOnInit(): void {
    this.getAll({});
    this.headerService.setHeader({model: this.model, type: 'list'});
    this.utilService.set({name:'early-stimulation', type:'list'});
  }

  getAll(data_search:any){
   this.backendService.getAll(CLINICAL_HISTORY.EARLY_STIMULATION,data_search).subscribe({
     next: (v) => { this.dataSource.data = v; console.log(v);},
     error: (e) => console.error(e),
     complete: () => console.info('complete')
   });
  }

  deleteHobbies_Interest(){
    this.backendService.delete(CATALOGS.HOBBIES_INTEREST ,this.selection.selected.map(function(hobbies_interest_data){return hobbies_interest_data.id})).subscribe({
     next: (v) => { console.log(v) },
     error: (e) => console.error(e),
     complete: () => this.getAll({})
    });
  }

  show(hobbies_interest_data:Hobbies_Interest){
    this.router.navigate(['main','clinical-history','early-stimulation','show',hobbies_interest_data.id]);
  }

  showMedicalHistoryReport(event: any, element: any){
    event.stopPropagation();
    if(element.medical_history_report){
      this.router.navigate(['main','clinical-history','early-stimulation','report-show',element.medical_history_report[0].id]);
    }
  }
  

    /** Whether the number of selected elements matches the total number of rows. */
    isAllSelected() {
      const numSelected = this.selection.selected.length;
      const numRows = this.dataSource.data.length;
      return numSelected === numRows;
    }
  
    /** Selects all rows if they are not all selected; otherwise clear selection. */
    masterToggle() {
      if (this.isAllSelected()) {
        this.selection.clear();
        return;
      }
  
      this.selection.select(...this.dataSource.data);
    }
  
    /** The label for the checkbox on the passed row */
    checkboxLabel(row?: Hobbies_Interest): string {
      if (!row) {
        return `${this.isAllSelected() ? 'deselect' : 'select'} all`;
      }
      return `${this.selection.isSelected(row) ? 'deselect' : 'select'} row ${row.id}`;
    }

    delete(){
      this.backendService.delete(CATALOGS.HOBBIES_INTEREST ,this.selection.selected.map(function(hobbies_interest){return hobbies_interest.id})).subscribe({
        next: (v) => { console.log(v) },
        error: (e) => console.error(e),
        complete: () => this.getAll({})
      });
    }

}
    