//File generated by vaweei CLI
import { Component, OnInit, Output, EventEmitter, ViewChild, ElementRef, HostListener, OnDestroy, Input, AfterViewInit } from '@angular/core';
import { UntypedFormGroup, UntypedFormControl, Validators, UntypedFormBuilder } from '@angular/forms';
import { ActivatedRoute, Router } from '@angular/router';
import { Subscription } from 'rxjs';
import { filter } from 'rxjs/operators';
import { ADMINISTRATION } from 'src/app/utils/setup/routes.enum';

import { GenericSnackbarComponent } from 'src/app/utils/components/generic_snackbar/generic_snackbar.component';
import { Editor } from 'ngx-editor';
import { ClassicEditor, Bold, Essentials, Italic, Mention, Paragraph, Undo, Heading, Table, TableToolbar, TableCellProperties, TableProperties, FontFamily, FontSize, FontColor, FontBackgroundColor, Link, BlockQuote, List, Indent, Underline, Alignment, HorizontalLine, RemoveFormat } from 'ckeditor5';

//SERVICES
import { HeaderService } from 'src/app/services/header.service';
import { BackendService } from 'src/app/services/backend.service';
import { UtilService } from 'src/app/services/util.service';
import { MatSnackBar } from '@angular/material/snack-bar';

@Component({
  selector: 'app-bayley_item-form-view',
  templateUrl: './bayley_item-form-view.component.html',
  styleUrls: ['./bayley_item-form-view.component.scss']
})
export class BayleyItemFormViewComponent implements OnInit, OnDestroy, AfterViewInit {

  @ViewChild('firstInput', { static: false }) firstInput!: ElementRef;
  formGroup: UntypedFormGroup;
  @Input() modalConfigParent: any;
  @Input() nameForm: String = '';

  $headerAction!: Subscription;

  areas = [
    {value:"Cognitiva", label:"Cognitiva"},
    {value:"Lenguaje Expresivo", label:"Lenguaje Expresivo"},
    {value:"Lenguaje Receptivo", label:"Lenguaje Receptivo"},
    {value:"Motor Fino", label:"Motor Fino"},
    {value:"Motor Grueso", label:"Motor Grueso"}
  ]

  partida_data = [
    {value:"A", label:"A"},
    {value:"B", label:"B"},
    {value:"C", label:"C"},
    {value:"D", label:"D"},
    {value:"E", label:"E"},
    {value:"F", label:"F"},
    {value:"G", label:"G"},
    {value:"H", label:"H"},
    {value:"I", label:"I"},
    {value:"J", label:"J"}
  ]

  editor: Editor;

  customColorPalette = [
    {
      color: '#ffffff',
      label: 'Blanco'
    },
    {
      color: '#000000',
      label: 'Negro'
    },
    {
      color: '#626567',
      label: 'Gris 1'
    },
    {
      color: '#cacfd2',
      label: 'Gris 2'
    },
    {
      color: '#f2f3f4',
      label: 'Gris 3'
    },
    {
      color: '#c0392b',
      label: 'Rojo'
    },
    {
      color: '#e67e22',
      label: 'Naranja'
    },
    {
      color: '#f1c40f',
      label: 'Amarillo'
    },
    {
      color: '#2ecc71',
      label: 'Verde 1'
    },
    {
      color: '#27ae60',
      label: 'Verde 2'
    },
    {
      color: '#3498db',
      label: 'Azul 1'
    },
    {
      color: '#2980b9',
      label: 'Azul 2'
    },
    {
      color: '#8e44ad',
      label: 'Morado'
    },
  ]

  public Editor = ClassicEditor;
  public config = {
      toolbar: [
        'undo', 'redo',
        '|',
        'heading',
        '|',
        'fontfamily', 'fontsize', 'fontColor', 'fontBackgroundColor',
        '|',
        'bold', 'italic', 'underLine',
        '|',
        'bulletedList', 'numberedList', 'outdent', 'indent','alignment',
        '|',
        'link', 'blockQuote',
        '|', 
        'horizontalLine', 'insertTable',
        '|',
        'removeFormat'
      ],
      plugins: [
          Bold, Essentials, Italic, Mention, Paragraph, Undo, Heading, Table, TableToolbar, TableCellProperties, TableProperties, FontFamily, FontSize, FontColor, FontBackgroundColor, Link, BlockQuote, List, Underline, Indent, Alignment, HorizontalLine, RemoveFormat
      ],
      table: {
        contentToolbar: [ 'tableColumn', 'tableRow', 'mergeTableCells', 'tableProperties', 'tableCellProperties' ],
        tableProperties: {
          borderColors: this.customColorPalette,
          backgroundColors: this.customColorPalette
      },

      // Set the palettes for table cells.
      tableCellProperties: {
          borderColors: this.customColorPalette,
          backgroundColors: this.customColorPalette
      }
      },
      fontColor: {
        colors: this.customColorPalette
      },
  }

  constructor(
    private backendService: BackendService,
    private router : Router,
    private route: ActivatedRoute,
    private headerService : HeaderService,
    private fb: UntypedFormBuilder,
    private utilService: UtilService,
    private _snackBar: MatSnackBar,
  ) {
    this.setFocus();
    this.formGroup = this.fb.group({
      item: new UntypedFormControl(null, [Validators.required, Validators.maxLength(250)]),
      materials: new UntypedFormControl(null, [Validators.required, Validators.maxLength(250)]),
      notes: new UntypedFormControl(null, [Validators.required, Validators.maxLength(1000)]),
      area: new UntypedFormControl(null, [Validators.required, Validators.maxLength(250)]),
      stage: new UntypedFormControl(null, [Validators.required, Validators.maxLength(250)]),
    });

    this.editor = new Editor();
  }

  ngAfterViewInit(): void {
    this.$headerAction = this.headerService.getOutAction().subscribe(data => {
      switch (data.action) {
        case 'save':
          this.save();
          break;
      
        case 'cancel':
          this.cancel();
          break;

        default:
          break;
      }
    });
  }

  ngOnInit() {
    this.headerService.setHeader({name:'bayley-item',type:'form'});
    this.utilService.set({name:'bayley-item', type:'form'});
    this.formGroup.statusChanges
      .pipe(
        filter(() => this.formGroup.valid))
      .subscribe(() => this.onFormValid());

    this.formGroup.statusChanges
      .pipe(
        filter(() => this.formGroup.invalid))
      .subscribe(() => this.onFormInvalid());      
  }

  get form() { return this.formGroup.controls }

  ngOnDestroy() { this.$headerAction.unsubscribe(); }

  onFormValid() {
    this.headerService.sendInAction({action:'form', type: 'ready'});
  }

  onFormInvalid() {
    this.headerService.sendInAction({action:'form', type: 'not-ready'});
  }

  private setFocus() {
    setTimeout(() => this.firstInput.nativeElement !== undefined ? this.firstInput.nativeElement.focus() : '');
  }

  changeToUppercase(formName:string) {
    if(formName){
      const value = this.formGroup.get(formName)!.value;
      if (value) {
        this.formGroup.get(formName)!.setValue(value.toUpperCase());
      }
    }
  }

  save(){
    this.backendService.create(ADMINISTRATION.BAYLEY_ITEM ,this.formGroup.value).subscribe({
      next: (v) => { console.log(v); },
      error: (e) => console.error(e),
      complete: () => this.showSuccess()
    })
  }

  cancel(){
    this.router.navigate(['../','main','catalogs','hobbies-interest']);
  }

  showSuccess(){
    this._snackBar.openFromComponent(GenericSnackbarComponent, {
      data: {
        message: "Elemento creado correctamente",
        icon: "done"
      },
      duration: 5000
    });
  }

}
    