//File generated by vaweei CLI
import { Component, OnInit, Output, EventEmitter, ViewChild, ElementRef, HostListener, OnDestroy, Input, AfterViewInit } from '@angular/core';
import { FormGroup, FormControl, Validators, FormBuilder } from '@angular/forms';
import { ActivatedRoute, Router } from '@angular/router';
import { Subscription } from 'rxjs';
import { filter } from 'rxjs/operators';

//import PruebaService from 'src/app/services/catalogs/prueba.service';

@Component({
  selector: 'app-prueba-form-view',
  templateUrl: './prueba-form-view.component.html',
  styleUrls: ['./prueba-form-view.component.scss']
})
export class PruebaFormViewComponent implements OnInit, OnDestroy, AfterViewInit {

  @ViewChild('firstInput', { static: false }) firstInput!: ElementRef;
  formGroup: FormGroup;
  @Input() modalConfigParent: any;
  @Input() nameForm: String = '';

  constructor(
    //private pruebaService: PruebaService,
    private router : Router,
    private route: ActivatedRoute,
    // private handler: Handler,
    // public modalRef: BsModalRef,
    // private httpService: CrudService,
    // private router: Router,
    // private sessionService: SessionService,
    // private addressService: AddressesService,
    private fb: FormBuilder,
    // private stepperFisherProducerForm: StepperFisherProducerFormService
  ) {
    this.setFocus();
    this.formGroup = this.fb.group({
code: new FormControl(null, [Validators.required, Validators.maxLength(250)]),
name: new FormControl(null, [Validators.required, Validators.maxLength(250)]),
description: new FormControl(null, [ Validators.maxLength(250)]),
age: new FormControl(null, [ ]),

    });
  }

  ngAfterViewInit(): void {
  }

  ngOnInit() {
    this.formGroup.statusChanges
      .pipe(
        filter(() => this.formGroup.valid))
      .subscribe(() => this.onFormValid());

    this.formGroup.statusChanges
      .pipe(
        filter(() => this.formGroup.invalid))
      .subscribe(() => this.onFormInvalid());      
  }

  get form() { return this.formGroup.controls }

  ngOnDestroy() {}

  onFormValid() {}

  onFormInvalid() {}

  private setFocus() {
    setTimeout(() => this.firstInput.nativeElement !== undefined ? this.firstInput.nativeElement.focus() : '');
  }

  changeToUppercase(formName:string) {
    if(formName){
      const value = this.formGroup.get(formName)!.value;
      if (value) {
        this.formGroup.get(formName)!.setValue(value.toUpperCase());
      }
    }
  }

  save(){
    //this.emotionsService.addEmotion(this.formGroup.value).subscribe({
      //next: (v) => { console.log(v); },
      //error: (e) => console.error(e),
      //complete: () => this.router.navigate(['catalogs','emotions','table'])
    //})
  }

}
    