//File generated by vaweei CLI
import { Component, OnInit, Output, EventEmitter, ViewChild, ElementRef, HostListener, OnDestroy, Input, AfterViewInit } from '@angular/core';
import { FormGroup, FormControl, Validators, FormBuilder } from '@angular/forms';
import { ActivatedRoute, Router } from '@angular/router'; 

//import { PruebaService } from 'src/app/services/catalogs/prueba.service';
import { Subscription } from 'rxjs';
import { filter } from 'rxjs/operators';

@Component({
  selector: 'app-prueba-update-form-view',
  templateUrl: './prueba-update-form-view.component.html',
  styleUrls: ['./prueba-update-form-view.component.scss']
})
export class PruebaUpdateFormViewComponent implements OnInit, OnDestroy, AfterViewInit {

  @ViewChild('firstInput', { static: false }) firstInput!: ElementRef;
  formGroup: FormGroup;
  @Input() modalConfigParent: any;
  @Input() nameForm: String = '';

  // suscribeAddressService: Subscription;

  // @HostListener('document:keydown.escape', ['$event']) onKeydownHandler(event: KeyboardEvent) {
  //   if (event.keyCode === 27) {
  //     event.stopImmediatePropagation();
  //     this.onClose();
  //   }
  // }

  constructor(
    //private pruebaService: PruebaService,
    private router : Router,
    private route: ActivatedRoute,
    private fb: FormBuilder,
    // private stepperFisherProducerForm: StepperFisherProducerFormService
  ) {
    this.setFocus();
    this.formGroup = this.fb.group({
      id: new FormControl(null, [Validators.required, Validators.maxLength(250)]),
      code: new FormControl(null, [Validators.required, Validators.maxLength(250)]),
name: new FormControl(null, [Validators.required, Validators.maxLength(250)]),
description: new FormControl(null, [ Validators.maxLength(250)]),
age: new FormControl(null, [ ]),

    });
    // this.router.events.subscribe((val) => {
    //   this.modalRef.hide();
    // });
  }

  ngAfterViewInit(): void {
    // this.suscribeAddressService = this.stepperFisherProducerForm.getAddressUpdate().subscribe(address => {
    //   this.formGroup.reset();
    //   this.paForm.street.setValue(address.data.street);
    //   this.paForm.int_number.setValue(address.data.int_number);
    //   this.paForm.ext_number.setValue(address.data.ext_number);
    //   this.paForm.between1.setValue(address.data.between1);
    //   this.paForm.between2.setValue(address.data.between2);
    //   this.paForm.references.setValue(address.data.references);
    //   this.paForm.zipcode.setValue(address.data.zipcode);
    //   this.paForm.neighborhood.setValue(address.data.neighborhood);
    //   if (address.data.zipcode) { this.searchByZipCode(); }
    // });
  }

  ngOnInit() {
    this.formGroup.statusChanges
      .pipe(
        filter(() => this.formGroup.valid))
      .subscribe(() => this.onFormValid());

    this.formGroup.statusChanges
      .pipe(
        filter(() => this.formGroup.invalid))
      .subscribe(() => this.onFormInvalid());

    if(this.route.snapshot.paramMap.get('emotion_id')){
      this.getPruebaById(this.route.snapshot.paramMap.get('prueba_id'));
    }
  }

  get paForm() { return this.formGroup.controls }
  
  ngOnDestroy() {
    // this.suscribeAddressService.unsubscribe();
  }

  onFormValid() {
    // const sendDataParent = {
    //   formGroup: this.formGroup.value,
    //   zip_codes: this.zip_codes
    // };
    // this.stepperFisherProducerForm.setAddress(sendDataParent, true);
  }

  onFormInvalid() {
    // this.stepperFisherProducerForm.setAddress(null, false);
  }

  private setFocus() {
    setTimeout(() => this.firstInput.nativeElement !== undefined ? this.firstInput.nativeElement.focus() : '');
  }

  changeToUppercase(formName:string) {
    if(formName){
      const value = this.formGroup.get(formName)!.value;
      if (value) {
        this.formGroup.get(formName)!.setValue(value.toUpperCase());
      }
    }
  }

  update(){
    //this.pruebaService.updatePrueba(this.formGroup.value).subscribe({
    //  next: (v) => { console.log(v); },
    //  error: (e) => console.error(e),
    //  complete: () => this.router.navigate(['catalogs','emotions','table'])
    //})
  }

  getPruebaById(id:any){
    //if(id){
    //  this.pruebaService.getPruebaById(id).subscribe({
    //    next: (v) => { this.setPrueba(v[0]) },
    //    error: (e) => console.error(e),
    //    complete: () => console.info('complete')
    //  });
    //}
  }

  setPrueba(record:any){
    this.formGroup.get('id')!.setValue(this.route.snapshot.paramMap.get('record_id'));
    this.formGroup.get('code')!.setValue(record.code);
    this.formGroup.get('name')!.setValue(record.name);
    this.formGroup.get('description')!.setValue(record.description);

  }

  cancelUpdate(){
    //this.router.navigate(['catalogs','emotions','form',this.route.snapshot.paramMap.get('emotion_id')]);
  }

  // cleanFormGroup() {
  //   this.formGroup.get('neighborhood').reset();
  //   this.formGroup.get('locality').reset();
  //   this.formGroup.get('municipality').reset();
  //   this.formGroup.get('state').reset();
  //   this.neighborhoods = [];
  // }

  // digitOnly(ev: any) {
  //   // wont allow e + -  .
  //   return (
  //     ev.keyCode !== 69 &&
  //     ev.keyCode !== 187 &&
  //     ev.keyCode !== 189 &&
  //     ev.keyCode !== 190
  //   );
  // }

}
    