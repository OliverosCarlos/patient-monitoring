//File generated by vaweei CLI
import { Component, OnInit, Output, EventEmitter, ViewChild, ElementRef, HostListener, OnDestroy, Input, AfterViewInit } from '@angular/core';
import { FormGroup, FormControl, Validators, FormBuilder } from '@angular/forms';
import { ActivatedRoute, Router } from '@angular/router';

//SERVICES
import { Clinical_notesService } from 'src/app/services/clinical_note/clinical_note.service';
import { HeaderService } from 'src/app/services/header.service';
import { UtilService } from 'src/app/services/util.service';
import {MatAccordion} from '@angular/material/expansion';
import { Subscription } from 'rxjs';
import { filter } from 'rxjs/operators';

@Component({
  selector: 'app-clinical_note-show-form-view',
  templateUrl: './clinical_note-show-form-view.component.html',
  styleUrls: ['./clinical_note-show-form-view.component.scss']
})
export class ClinicalNoteShowFormViewComponent implements OnInit, OnDestroy, AfterViewInit {

  record = {
    first_name: '',
    last_name1: '',
    last_name2: '',
    age: '',
    phone_number: '',
    email: '',
    image: '',
    clinical_notes:[
      {
        reason_consultations:[{notes:'',reason_consultation_symptoms:[{symptom_name:'', symptom_color:null}]}],
        clinical_note_functionality_analysis: [{notes:'', functionality_analysis:[{emotion_name:'', conduct:'', functionality:'', emotion_color:''}]}],
        clinical_note_hobbies_interest: [{notes:'',hobbies_interest_list:[{hobbies_interests_name:''}]}],
        personal_characteristics: [{notes:''}],
        therapy_objectives: [{notes:''}],
        approachs: [{notes:''}],
        nonverbal_languages: [{notes:'', person:false, space:false, time:false}] 
      }
    ]
  };

  area1 : any[] = []
  area2 : any[] = []
  area3 : any[] = []
  area4 : any[] = []

  displayedColumns = ['emotion','conduct','functionality','color'];

  $headerAction!: Subscription;

  @ViewChild(MatAccordion) accordion!: MatAccordion;

  constructor(
    private clinical_notesService: Clinical_notesService,
    private headerService: HeaderService,
    private utilService: UtilService,
    private route: ActivatedRoute,
    private router : Router
  ) {}

  ngOnDestroy(): void {
    this.$headerAction.unsubscribe();
  }

  ngAfterViewInit(): void {
    this.$headerAction = this.headerService.getOutAction().subscribe(data => {
      switch (data.action) {
        case 'edit':
          this.edit();
          break;
      
        default:
          break;
      }
    });

    this.utilService.set({name:'clinical_notes', type:'show'});
  }

  ngOnInit() {
    this.headerService.setHeader({name:'clinical_notes',type:'show'});
    if(this.route.snapshot.paramMap.get('patient_id')){
      this.clinical_noteById(this.route.snapshot.paramMap.get('patient_id'));
    }
  }

  clinical_noteById(id:any){
    if(id){
     this.clinical_notesService.getClinical_noteById(id).subscribe({
       next: (v) => { this.record = v[0];console.log(v);this.setAreas(v[0]); },
       error: (e) => console.error(e),
       complete: () => console.info('complete')
     });
    }
  }

  setAreas(data:any){
    data.clinical_notes[0].clinical_note_support_networks[0].support_network.forEach((item: any) => {
      switch (item.area) {
        case 'FAMILY':
          this.area1.push(item)
          break;
        case 'SCHOOL':
          this.area2.push(item)
          break;
        case 'LABOR':
          this.area3.push(item)
          break;
        case 'SOCIAL':
          this.area4.push(item)
          break;
        default:
          break;
      }
    });
  }

  edit(){
    this.router.navigate(['catalogs','hobbies-interest','update',this.route.snapshot.paramMap.get('hobbies-interest_id')]);
  }

  viewEmotion(data:any){
    console.log(data)
  }
}
    