//File generated by vaweei CLI
import { Component, ElementRef, OnInit, ViewChild } from '@angular/core';
import { ActivatedRoute, Router } from '@angular/router';
import { Subscription } from 'rxjs';
import { PSYCHOTHERAPY, ADMINISTRATION } from 'src/app/utils/setup/routes.enum';

//SERVICE
import { BackendService } from 'src/app/services/backend.service';
import { HeaderService } from 'src/app/services/header.service';
import { UtilService } from 'src/app/services/util.service';

//MODELS
import { MODELS } from 'src/app/utils/setup/model.setup';
import { Model } from 'src/app/models/vw-model.model';

import {SelectionModel} from '@angular/cdk/collections';
import {MatTableDataSource} from '@angular/material/table';
import { animate, state, style, transition, trigger } from '@angular/animations';
import { right } from '@popperjs/core';

@Component({
  selector: 'app-bayley_apply-tool-view',
  templateUrl: './bayley_apply-tool-view.component.html',
  styleUrls: ['./bayley_apply-tool-view.component.scss'],
  animations: [
    trigger('openClose', [
      // ...
      state('open', style({
        right : '1000px',
        opacity: 1,
      })),
      state('closed', style({
        
        opacity: 1,
      })),
      transition('open => closed', [
        animate('0.3s')
      ]),
      transition('closed => open', [
        animate('0.3s')
      ]),
    ]),
  ],
})

export class BayleyItemListViewComponent implements OnInit {

  model : Model;

  $headerAction!: Subscription;

  current_data:any[] = []

  list = [
    {name:'carlos',active: true},
    {name:'carlos',active: true},
    {name:'carlos',active: true}
    
  ]

  dummy = [
    {name:'carlos',active: false},
    {name:'carlos',active: false},
    {name:'carlos',active: false}
    
  ]

  isOpen = false

  @ViewChild('main_card') main_card_element!: ElementRef;
  @ViewChild('secondary_card') secondary_card_element!: ElementRef;

  constructor(
    private router : Router,
    private route: ActivatedRoute,
    private headerService : HeaderService,
    private backendService : BackendService,
    private utilService: UtilService
    ) {
      this.model = MODELS.find(model => model.name == 'bayley-item')!;
    }

  ngAfterViewInit(): void {
    this.$headerAction! = this.headerService.getOutAction().subscribe(data => {
      switch (data.action) {
        case 'delete':
          this.delete();
          break;
      
        default:
          break;
      }
    });
  }

  ngOnInit(): void {
    this.getAll()  
    this.headerService.setHeader({model: this.model, type: 'list'});
    this.utilService.set({name:'bailey-item', type:'list'});
  }

  getAll(){
    this.backendService.getAll(ADMINISTRATION.BAYLEY_ITEM,{}).subscribe({
     next: (v) => {
      let list = this.split_col_grouped(this.group_by(this.merge_cols(v), 'aux'));
      this.current_data = this.group_by(list, 'area')[0].children[0].children;
      console.log('GROUP 2', this.current_data);
      
      // this.currentData = this.split_col_grouped(list);
      },
     error: (e) => console.error(e),
     complete: () => console.info('complete')
   });
  }

  delete(){
    // this.hobbiesInterestService.deleteHobbiesInterests(this.selection.selected.map(function(hobbies_interest){return hobbies_interest.id})).subscribe({
    //   next: (v) => { console.log(v) },
    //   error: (e) => console.error(e),
    //   complete: () => this.getAll()
    // });
  }

  group_by(data:any, field_to_group: string){

    let grouped_list: any[] = []

    data.forEach( (opt:any) => {
      if ( grouped_list.find( (item) => {return item.aux == opt[field_to_group]}) == undefined) {
        grouped_list.push({
          'aux' : opt[field_to_group],
          'children': [opt]
        });
      }else{
        grouped_list.map(item => 
          {
            if(item.aux == opt[field_to_group]){
              item.children.push(opt);
              return item;
            }else{
              return item;
            }
          }  
        )
      }
    });

    return grouped_list;

  }

  merge_cols(data: any){
    let toGroup = data.map( (obj:any) => ({...obj, aux: obj.area + " - " + obj.stage}) )
    return toGroup
  }

  split_col_grouped(data: any){
    let toGroup = data.map( (obj:any) => ({...obj, area: obj.aux.split("-")[0], stage: obj.aux.split("-")[1]}) )
    return toGroup
  }

  // filterTableData(event: any){
  //   this.dataSource.data = this.currentData.filter( (obj:any) => obj.area == event.value)
  // }

  handleNext(){
    this.isOpen = !this.isOpen
    // const {left, top} = this.main_card_element.nativeElement.getBoundingClientRect();
    // console.log(left, top);
    // // "translate("+x+","+y+")";

    // this.secondary_card_element.nativeElement.style.transform = "translate("+(left)+"px, "+(top)+"px)";
    this.dummy[2].active = !this.dummy[2].active
  }

}
    