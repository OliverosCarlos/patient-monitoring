//File generated by vaweei CLI
import { Component, ElementRef, OnInit, ViewChild } from '@angular/core';
import { ActivatedRoute, Router } from '@angular/router';
import { Subscription } from 'rxjs';
import { PSYCHOTHERAPY, ADMINISTRATION } from 'src/app/utils/setup/routes.enum';

//SERVICE
import { BackendService } from 'src/app/services/backend.service';
import { HeaderService } from 'src/app/services/header.service';
import { UtilService } from 'src/app/services/util.service';

//MODELS
import { MODELS } from 'src/app/utils/setup/model.setup';
import { Model } from 'src/app/models/vw-model.model';

import {SelectionModel} from '@angular/cdk/collections';
import {MatTableDataSource} from '@angular/material/table';
import { animate, state, style, transition, trigger } from '@angular/animations';
import { left, right } from '@popperjs/core';

@Component({
  selector: 'app-bayley_apply-tool-view',
  templateUrl: './bayley_apply-tool-view.component.html',
  styleUrls: ['./bayley_apply-tool-view.component.scss'],
  animations: [
    trigger('slideInOut', [
      state('in', style({ transform: 'translateX(0)' })), 
      state('left', style({ transform: 'translateX(-100%)' })), 
      state('right', style({ transform: 'translateX(100%)' })), 
      // transition('void => in, left => in, right => in', [ animate('500ms ease-in') ]), 
      transition('left => in', [ animate('200ms ease-in') ]), 
      transition('right => in', [ animate('200ms ease-in') ]) 
    ])
  ],
})

export class BayleyItemListViewComponent implements OnInit {

  model : Model;

  $headerAction!: Subscription;

  all_data : any = []
  current_area : any= {children:[{stage:"", children:[]}]}

  current_item = 0
  animationState = 'in';

  area_menu = [
    {name:'Cognitiva', active: true, id:"cognitivo"},
    {name:'Lenguaje Expresivo', active: false, id:"lenguaje_expresivo"},
    {name:'Lenguaje Receptivo', active: false, id:"lenguaje_receptivo"}
  ]

  dummy = [
    {name:'carlos',active: false},
    {name:'carlos',active: false},
    {name:'carlos',active: false}

  ]

  isOpen = false

  @ViewChild('main_card') main_card_element!: ElementRef;
  @ViewChild('secondary_card') secondary_card_element!: ElementRef;

  constructor(
    private router : Router,
    private route: ActivatedRoute,
    private headerService : HeaderService,
    private backendService : BackendService,
    private utilService: UtilService
    ) {
      this.model = MODELS.find(model => model.name == 'bayley-item')!;
      this.getAll()
    }

  ngAfterViewInit(): void { 
    this.$headerAction! = this.headerService.getOutAction().subscribe(data => {
      switch (data.action) {
        case 'delete':
          this.delete();
          break;
      
        default:
          break;
      }
    });
  }

  ngOnInit(): void {
    this.headerService.setHeader({model: this.model, type: 'list'});
    this.utilService.set({name:'bailey-item', type:'dashboard'});
  }

  getAll(){
    this.backendService.getAll(ADMINISTRATION.BAYLEY_ITEM,{}).subscribe({
     next: (v) => {
      let list = this.split_col_grouped(this.group_by(this.merge_cols(v), 'aux'));
      
      this.all_data = this.group_by(list, 'area')

      this.all_data = this.all_data.map(
        (area:any) => (
        {...area, children: area.children.map(
            (block:any) => (
              {...block,
                current_item: 0,
                children: block.children.map( (obj:any, index:number) => ({...obj, active: index==0?true:false, animationState: "in"}) )}
            )
          )
        }
      ) )

      this.current_area = this.all_data[0]
      console.log(this.all_data);
      
      
      },
     error: (e) => console.error(e),
     complete: () => console.info('complete')
   });
  }

  delete(){
    // this.hobbiesInterestService.deleteHobbiesInterests(this.selection.selected.map(function(hobbies_interest){return hobbies_interest.id})).subscribe({
    //   next: (v) => { console.log(v) },
    //   error: (e) => console.error(e),
    //   complete: () => this.getAll()
    // });
  }

  group_by(data:any, field_to_group: string){

    let grouped_list: any[] = []

    data.forEach( (opt:any) => {
      if ( grouped_list.find( (item) => {return item.aux == opt[field_to_group]}) == undefined) {
        grouped_list.push({
          'aux' : opt[field_to_group],
          'children': [opt]
        });
      }else{
        grouped_list.map(item => 
          {
            if(item.aux == opt[field_to_group]){
              item.children.push(opt);
              return item;
            }else{
              return item;
            }
          }  
        )
      }
    });

    return grouped_list;

  }

  merge_cols(data: any){
    let toGroup = data.map( (obj:any) => ({...obj, aux: obj.area + " - " + obj.stage}) )
    return toGroup
  }

  split_col_grouped(data: any){
    let toGroup = data.map( (obj:any) => ({...obj, area: obj.aux.split("-")[0], stage: obj.aux.split("-")[1]}) )
    return toGroup
  }

  // filterTableData(event: any){
  //   this.dataSource.data = this.currentData.filter( (obj:any) => obj.area == event.value)
  // }

  handleNext(data:any){
    data.children[data.current_item].active = false
    data.current_item = data.current_item+1
    data.children[data.current_item].active = true

    data.children[data.current_item].active = true
    data.children[data.current_item].animationState = 'right'; setTimeout(() => { data.children[data.current_item].animationState = 'in'; }, 100);
  }

  handlePrevious(data:any){
    data.children[data.current_item].active = false
    data.current_item = data.current_item-1
    data.children[data.current_item].active = true

    data.children[data.current_item].active = true
    data.children[data.current_item].animationState = 'left'; setTimeout(() => { data.children[data.current_item].animationState = 'in'; }, 100);
  }

  handleAreaSelect(name:string){
    this.area_menu = this.area_menu.map(x => {
      return x.name == name ? {...x, active: true} : { ...x, active: false };
    });
    
    this.current_area = this.all_data.find((element: any) => element.aux.trim() == name.trim());
  }


}
    